buildscript {
    ext {
        kotlin_version = '1.3.72'
        coroutine_version = '1.3.7'
        kodein_version = '6.5.5'
    }
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://dl.bintray.com/kodein-framework/Kodein-DI/org/kodein/di/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

def kotlinPluginId = 'kotlin-multiplatform'
final hasPlugin = project.getPlugins().hasPlugin(kotlinPluginId);
if (hasPlugin) {
    final Plugin plugin = project.getPlugins().getPlugin(kotlinPluginId)
    println 'Plugin already applied - version ' + plugin.properties['kotlinPluginVersion']
} else {
    apply plugin: "kotlin-multiplatform"
}

repositories {
    jcenter()
    mavenCentral()
}

group 'ai.sterling.kinject'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    jvm()
    js()
//    iosX64("ios") {
//        binaries {
//            framework()
//        }
//    }

//    targets {
//        //fromPreset(presets.android, 'android')
//
//
//        def iosPreset = presets.iosX64
//        fromPreset(iosPreset, 'ios') {
//            binaries {
//                framework {
//                    // Disable bitcode embedding for the simulator build.
//                    if (iosPreset == presets.iosX64) {
//                        embedBitcode("disable")
//                    }
//                }
//            }
//            //compilations.main.outputKinds('FRAMEWORK')
//            compilations.each {
//                //it.extraOpts("-linkerOpts", "-lsqlite3")
//            }
//        }
//    }

    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"

                implementation "org.kodein.di:kodein-di-core:$kodein_version"
                implementation "org.kodein.di:kodein-di-erased:$kodein_version"
            }
        }
        commonTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-common'
                api 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation 'javax.inject:javax.inject:1'
            }
        }
        jvmTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test'
                api 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
//        iosMain {
//            dependencies {
//                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
//
//                implementation "org.kodein.di:kodein-di-core:$kodein_version"
//                implementation "org.kodein.di:kodein-di-erased:$kodein_version"
//            }
//        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}

configurations {
    compileClasspath
}

//task copyFramework {
//    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
//    def target = project.findProperty('kotlin.target') ?: 'ios'
//    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask
//
//    doLast {
//        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
//        def targetDir = getProperty('configuration.build.dir')
//        copy {
//            from srcFile.parent
//            into targetDir
//            include 'common.framework/**'
//            include 'common.framework.dSYM'
//        }
//    }
//}
