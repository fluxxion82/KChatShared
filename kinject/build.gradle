apply plugin: "kotlin-multiplatform"
//apply plugin: 'org.jetbrains.kotlin.native.cocoapods'
//apply plugin: 'konan'
//apply plugin: 'maven-publish'


repositories {
    jcenter()
    mavenCentral()
//    maven { url "https://kotlin.bintray.com/native-xcode" }
}

group 'ai.sterling.kinject'
version '0.0.1'

kotlin {
//    cocoapods {
//        // The CocoaPods version notation is supported.
//        // The dependency will be added to all macOS and iOS targets.
//        summary = "Shared Kotlin/Native module"
//        homepage = "Link to a Kotlin/Native module homepage"
//        //pod("Cleanse", "~> 4.2.5")
//        pod("AFNetworking", "~> 3.2.0")
//    }

    jvm()
    js()
//    iosX64('ios')
//    iosArm32('iosArm32')
//    iosArm64('iosArm64')

    targets {
//        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
//                              ? presets.iosArm64 : presets.iosX64
//
//        fromPreset(iOSTarget, 'ios') {
//            binaries {
//                framework("kinject")
//            }
//        }

//        configure([ios, iosArm32, iosArm64]) {
//            binaries.framework {
//                baseName = "$ios_framework_name"
//            }
//        }
    }

    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                //api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"
            }
        }
        commonTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-common'
                api 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib:1.4.0-rc"
                implementation 'javax.inject:javax.inject:1'
            }
        }
        jvmTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test'
                api 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
//        iosMain {
//            dependencies {
//                api 'org.jetbrains.kotlin.native.xcode:kotlin-native-xcode-11-4-workaround:1.3.72.0'
//                //implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
//                //implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"
//            }
//        }
//        iosTest {
//
//        }
//        configure([iosArm32Main, iosArm64Main]) {
//            dependsOn iosMain
//        }
//        configure([iosArm32Test, iosArm64Test]) {
//            dependsOn iosTest
//        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}

//konanArtifacts {
//    def frameworksDir = "${projectDir}/Frameworks"
//    def productsDir = frameworksDir
//    def helperLibDir = frameworksDir
//
//    interop("RxSwiftWrapperFramework") {
//        defFile "src/main/c_interop/RxSwiftWrapperFramework.def"
//
//        compilerOpts "-F${productsDir}", "-F${helperLibDir}"
//        linkerOpts "-F${productsDir}", "-F${helperLibDir}"
//
//        includeDirs "${frameworksDir}/RxSwiftWrapperFramework.framework/Headers"
//    }
//
//    // Declare building into a framework.
//    framework('Multiweather') {
//        // The multiplatform support is disabled by default.
//        enableMultiplatform true
//        extraOpts '-module_name', ''
//
//        libraries {
//            artifact "RxSwiftWrapperFramework"
//        }
//
//        linkerOpts '-rpath', "${frameworksDir}"
//    }
//}

configurations {
    compileClasspath
}

//task packForXcode(type: Sync) {
//    final File frameworkDir = new File(buildDir, "xcode-frameworks")
//    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
//    final def framework = kotlin.targets.ios.binaries.getFramework("kinject", mode)
//
//    inputs.property "mode", mode
//    dependsOn framework.linkTask
//
//    from { framework.outputFile.parentFile }
//    into frameworkDir
//
//    doLast {
//        new File(frameworkDir, 'gradlew').with {
//            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
//            setExecutable(true)
//        }
//    }
//}
//
//tasks.build.dependsOn packForXcode

//task copyFramework {
//    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
//    def target = project.findProperty('kotlin.target') ?: 'ios'
//    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask
//
//    doLast {
//        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
//        def targetDir = getProperty('configuration.build.dir')
//        copy {
//            from srcFile.parent
//            into targetDir
//            include 'common.framework/**'
//            include 'common.framework.dSYM'
//        }
//    }
//}

//task fatFramework(type: FatFrameworkTask) {
//    // The fat framework must have the same base name as the initial frameworks.
//    baseName = "$ios_framework_name"
//    // Specify the frameworks to be merged.
//    from(
//            kotlin.targets.ios.binaries.getFramework("RELEASE"),
//            kotlin.targets.iosArm32.binaries.getFramework("RELEASE"),
//            kotlin.targets.iosArm64.binaries.getFramework("RELEASE")
//    )
//}
